<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Crypto Portfolio</title>
    <link rel="stylesheet" href="/styles/main.css">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
</head>
<body>
    <div class="container mt-5">
        <h1>Crypto Portfolio</h1>
        <h2>Total Value: <span id="totalValue">$0.00</span></h2>
        <div class="currency-select-container my-3">
            <label for="currencySelect">Currency:</label>
            <select id="currencySelect" class="form-select">
                <option value="usd" selected>$USD</option>
                <option value="eur">€EUR</option>
                <option value="gbp">£GBP</option>
                <option value="jpy">¥JPY</option>
                <option value="cad">$CAD</option>
                <option value="aud">$AUD</option>
                <option value="chf">₣CHF</option>
                <!-- Add more currencies as needed -->
            </select>
        </div>
        <div id="rowsContainer">
            <!-- Rows will be added here dynamically -->
        </div>
        
        <button id="addRow" class="btn btn-primary mt-3">+</button>
        
        <% if (allCoins.length === 0) { %>
            <p id="coinsListError" class="errorMessage">There was an error retrieving the list of coins. Please try again later.</p>
        <% } else { %>
            <datalist id="coinsList">
                <% allCoins.forEach(function(coin) { %>
                    <option value="<%= coin.id %>"><%= coin.name %></option>
                <% }); %>
            </datalist>
        <% } %>
        
        <div id="globalErrorMessage" class="errorMessage"></div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const currencySymbolMap = {
                'usd': '$',
                'eur': '€',
                'gbp': '£',
                'jpy': '¥',
                'cad': '$',
                'aud': '$',
                'sgd': '$',
                'hkd': '$',
                'nzd': '$',
                'chf': '₣',
                // Add more currencies and their symbols as needed
            };

            document.getElementById('currencySelect').addEventListener('change', calculateTotalValue);
            document.getElementById('addRow').addEventListener('click', addRow);
            document.getElementById('rowsContainer').addEventListener('input', calculateTotalValue);

            // Function to add a new cryptocurrency row
            function addRow() {
                const rowsContainer = document.getElementById('rowsContainer');
                const newRow = document.createElement('div');
                newRow.classList.add('cryptoRow');
                newRow.innerHTML = `
                    <div class="inputGroup d-flex align-items-center">
                        <input list="coinsList" class="coinInput form-control" placeholder="Select coin">
                        <input type="number" class="unitsInput form-control" placeholder="Amount" step="any">
                        <button type="button" class="btn btn-danger deleteRow ms-2"><i class="fas fa-trash"></i></button>
                    </div>
                `;
                rowsContainer.appendChild(newRow);
                newRow.querySelector('.deleteRow').addEventListener('click', deleteRow);
                updateDeleteButtonsVisibility();
            }

            // Function to handle row deletion
            function deleteRow() {
                this.parentElement.parentElement.remove(); // Adjusted to target the .cryptoRow element correctly
                calculateTotalValue();
                updateDeleteButtonsVisibility();
            }

            // Function to update delete buttons visibility based on the number of rows
            function updateDeleteButtonsVisibility() {
                const deleteButtons = document.querySelectorAll('.deleteRow');
                if (deleteButtons.length > 1) {
                    deleteButtons.forEach(button => button.style.display = 'inline-block');
                } else {
                    deleteButtons.forEach(button => button.style.display = 'none');
                }
            }

            // Async function to calculate the total value of the crypto portfolio
            async function calculateTotalValue() {
                const currency = document.getElementById('currencySelect').value;
                let totalValue = 0;
                const rows = document.querySelectorAll('.cryptoRow');

                for (const row of rows) {
                    const coinInput = row.querySelector('.coinInput').value;
                    const unitsInput = row.querySelector('.unitsInput');
                    const units = parseFloat(unitsInput.value) || 0;

                    if (coinInput && units > 0) {
                        try {
                            const response = await fetch(`/price?coin=${coinInput}&currency=${currency}`);
                            if (!response.ok) {
                                throw new Error(response.status === 429 ? 'Rate limit exceeded. Please wait a moment before trying again.' : 'Failed to fetch price');
                            }
                            const data = await response.json();
                            totalValue += data.price * units;
                        } catch (error) {
                            console.error('Error fetching price:', error);
                            document.getElementById('globalErrorMessage').textContent = error.message;
                            return;
                        }
                    }
                }

                document.getElementById('totalValue').textContent = `${currencySymbolMap[currency] || ''}${totalValue.toFixed(2)}`;
            }
        });

                addRow();

            </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
</body>
</html>
